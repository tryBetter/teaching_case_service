// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// -------------------
// --- 数据模型定义 ---
// -------------------

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  articles  Article[]
  comments  Comment[]
  favorites Favorite[]
  notes     Note[]
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  media     ArticleMedia[]
  comments  Comment[]
  favorites Favorite[]
  notes     Note[]
}

model Media {
  id        Int      @id @default(autoincrement())
  type      MediaType
  url       String
  createdAt DateTime @default(now())

  // 多对多关系：一个媒体文件可以关联多个文章
  articles  ArticleMedia[]
}

// 文章和媒体的多对多关系中间表
model ArticleMedia {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  media     Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   Int

  @@unique([articleId, mediaId]) // 防止重复关联
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int

  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  // 用于实现楼中楼评论
  parent    Comment? @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  Int?
  replies   Comment[] @relation("Replies")
}

// 收藏 (用户与文章的多对多关系)
model Favorite {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  createdAt DateTime @default(now())

  @@id([userId, articleId]) // 联合主键
}

// 笔记 (用户与文章的多对多关系，带笔记内容)
model Note {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
}

enum MediaType {
  IMAGE
  VIDEO
}

enum UserRole {
  ADMIN      // 管理员
  TEACHER    // 教师
  ASSISTANT  // 助教
  STUDENT    // 学生
}